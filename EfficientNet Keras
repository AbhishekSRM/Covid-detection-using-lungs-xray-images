EfficientNet Keras (and TensorFlow Keras)
PyPI version Downloads

This repository contains a Keras (and TensorFlow Keras) reimplementation of EfficientNet, a lightweight convolutional neural network architecture achieving the state-of-the-art accuracy with an order of magnitude fewer parameters and FLOPS, on both ImageNet and
five other commonly used transfer learning datasets.

The codebase is heavily inspired by the TensorFlow implementation.

Important!
There was a huge library update 24 of July 2019. Now efficintnet works with both frameworks: keras and tensorflow.keras.
If you have models, trained before that date, to load them, please, use efficientnet of 0.0.4 version (PyPI). You can roll back using pip install -U efficientnet==0.0.4.

Table of Contents
About EfficientNet Models
Examples
Models
Installation
Frequently Asked Questions
Acknowledgements
About EfficientNet Models
EfficientNets rely on AutoML and compound scaling to achieve superior performance without compromising resource efficiency. The AutoML Mobile framework has helped develop a mobile-size baseline network, EfficientNet-B0, which is then improved by the compound scaling method to obtain EfficientNet-B1 to B7.

	
EfficientNets achieve state-of-the-art accuracy on ImageNet with an order of magnitude better efficiency:

In high-accuracy regime, EfficientNet-B7 achieves the state-of-the-art 84.4% top-1 / 97.1% top-5 accuracy on ImageNet with 66M parameters and 37B FLOPS. At the same time, the model is 8.4x smaller and 6.1x faster on CPU inference than the former leader, Gpipe.

In middle-accuracy regime, EfficientNet-B1 is 7.6x smaller and 5.7x faster on CPU inference than ResNet-152, with similar ImageNet accuracy.

Compared to the widely used ResNet-50, EfficientNet-B4 improves the top-1 accuracy from 76.3% of ResNet-50 to 82.6% (+6.3%), under similar FLOPS constraints.

Examples
Initializing the model:
# models can be build with Keras or Tensorflow frameworks
# use keras and tfkeras modules respectively
# efficientnet.keras / efficientnet.tfkeras
import efficientnet.keras as efn 

model = efn.EfficientNetB0(weights='imagenet')  # or weights='noisy-student'
Loading the pre-trained weights:
# model use some custom objects, so before loading saved model
# import module your network was build with
# e.g. import efficientnet.keras / import efficientnet.tfkeras
import efficientnet.tfkeras
from tensorflow.keras.models import load_model

model = load_model('path/to/model.h5')
See the complete example of loading the model and making an inference in the Jupyter notebook here.

link- https://www.kaggle.com/xhlulu/efficientnet-keras-source-code
